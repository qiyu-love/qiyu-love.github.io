<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>lstm 学习</title>
    <link href="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>你是23</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lstm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03.25 算法总结</title>
    <link href="/2024/03/27/3.25%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2024/03/27/3.25%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="第一部分-快慢指针的运用"><a href="#第一部分-快慢指针的运用" class="headerlink" title="第一部分 快慢指针的运用"></a>第一部分 快慢指针的运用</h1><h2 id="倒数第k个结点"><a href="#倒数第k个结点" class="headerlink" title="倒数第k个结点"></a>倒数第k个结点</h2><p>由于链表无法像Array那样，根据索引快速获取对应索引值的数据，因此只能通过类似遍历的方法获得对应结点的索引，这也使他产生了以下问题：</p><p>如果我想找到倒数第k个结点呢？难道要遍历两遍吗，因为获得链表的长度就需要遍历一遍链表</p><blockquote><p>快慢指针</p></blockquote><p><img src="/2024/03/27/3.25%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/image-20240326222935590-1528490.png" alt="image-20240326222935590"></p><p>由上图所示，先将快指针移动k，这样两个指针之间的距离则为k；现在让这两个指针同时移动，直到快指针指向的结点为null，这样慢指针刚好为第k-1个指针！！妙哉！！</p><h2 id="中间结点"><a href="#中间结点" class="headerlink" title="中间结点"></a>中间结点</h2><p>相较上一个问题来说，这个就简单了许多。</p><p>由于fast的速度永远是slow的2倍，</p><ul><li>那么若是总结点个数为基数，则当fast指向最后一个结点时，slow刚好指向中间结点</li><li>若总结点为偶数，当fast指向空结点时，slow指向中间结点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这样设置判断条件，可以使快指针刚好落到上述两种情况</span><br><span class="hljs-keyword">while</span>(q != <span class="hljs-literal">null</span> &amp;&amp; q.next != <span class="hljs-literal">null</span>) &#123;<br>            p = p.next;<br>            q = q.next.next;<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><blockquote><p>判断链表是否有环，若没有则返回null，若有则返回环的入口</p></blockquote><p>若是单纯判断链表是否有环，较为简单，运用我们刚学到的快慢指针即可解决。</p><p>让快指针每次移动2个结点，慢指针移动1个结点。这样如果快指针为空，则证明肯定无环；如果两个指针相遇，则有环。</p><blockquote><p>但是如何找到环的入口呢？</p></blockquote><p>对于我这种数学不好的人，还是不用公式推导了，建议使用归纳法</p><p><img src="/2024/03/27/3.25%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/image-20240328215658287.png" alt="image-20240328215658287"></p><p>由于我们只能得到两指针的相遇点，那么我们是不是可以找找入口和相遇点的关系</p><p>根据上图所示，两指针在6相遇</p><blockquote><p>从6到入口的距离和从链表头到起点的距离相等！！</p></blockquote><p>问题引刃而解</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">刷刷这道题就好了</a></p>]]></content>
    
    
    <categories>
      
      <category>每周算法总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
