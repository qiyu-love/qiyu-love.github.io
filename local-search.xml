<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/10/04/%E7%8C%AB%E7%8C%AB/"/>
    <url>/2024/10/04/%E7%8C%AB%E7%8C%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="我帅吗"><a href="#我帅吗" class="headerlink" title="我帅吗"></a>我帅吗</h1><p><img src="/2024/10/04/%E7%8C%AB%E7%8C%AB/IMG_0070.jpeg" alt="张灿灿"></p><h1 id="我呆吗"><a href="#我呆吗" class="headerlink" title="我呆吗"></a>我呆吗</h1><p><img src="/2024/10/04/%E7%8C%AB%E7%8C%AB/IMG_0069.jpeg" alt="张花卷"></p><h1 id="我🧣好看吗"><a href="#我🧣好看吗" class="headerlink" title="我🧣好看吗"></a>我🧣好看吗</h1><p><img src="/2024/10/04/%E7%8C%AB%E7%8C%AB/IMG_0072.jpeg" alt="张钢筋"></p><h1 id="我可爱吗"><a href="#我可爱吗" class="headerlink" title="我可爱吗"></a>我可爱吗</h1><p><img src="/2024/10/04/%E7%8C%AB%E7%8C%AB/IMG_0071.jpeg" alt="张铁头"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/08/14/docker%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/08/14/docker%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><h2 id="删除旧版本"><a href="#删除旧版本" class="headerlink" title="删除旧版本"></a>删除旧版本</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sudo yum remove docker <span class="hljs-string">\</span><br>                  docker-client <span class="hljs-string">\</span><br>                  docker-client-latest <span class="hljs-string">\</span><br>                  docker-common <span class="hljs-string">\</span><br>                  docker-latest <span class="hljs-string">\</span><br>                  docker-latest-logrotate <span class="hljs-string">\</span><br>                  docker-logrotate <span class="hljs-string">\</span><br>                  docker-engine<br></code></pre></td></tr></table></figure><h2 id="安装仓库"><a href="#安装仓库" class="headerlink" title="安装仓库"></a>安装仓库</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo yum install -<span class="hljs-keyword">y</span> yum-utils<br>sudo yum-config-manager --<span class="hljs-built_in">add</span>-repo https://download.docker.<span class="hljs-keyword">com</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo<br></code></pre></td></tr></table></figure><h2 id="安装docker-engine"><a href="#安装docker-engine" class="headerlink" title="安装docker engine"></a>安装docker engine</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">sudo yum install docker-ce docker-ce-<span class="hljs-keyword">cli</span> containerd.io docker-compose-<span class="hljs-keyword">plugin</span><br></code></pre></td></tr></table></figure><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo systemctl start docker<br>sudo docker <span class="hljs-built_in">run</span> hello-world<br></code></pre></td></tr></table></figure><h1 id="添加镜像源"><a href="#添加镜像源" class="headerlink" title="添加镜像源"></a>添加镜像源</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-keyword">/etc/</span>docker/daemon.<span class="hljs-title class_">json</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>,<br>    <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>,<br>    <span class="hljs-string">&quot;https://fsp2sfpr.mirror.aliyuncs.com/&quot;</span><br>  ]<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo systemctl restart docker<br>sudo systemctl <span class="hljs-built_in">enable</span> docker<br>sudo systemctl <span class="hljs-built_in">enable</span> containerd<br></code></pre></td></tr></table></figure><h1 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/svg/28915315/1660548474734-dc17b48b-a862-48af-a8b2-41bbcc5ea96d.svg" alt="img"></p><h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><p>docker run [可选参数] 镜像名:版本 []</p><p><code>docker run --name some-nginx -d -p 8080:80 nginx:1.22</code></p><ul><li><code>--name</code> 定义容器的名称</li><li><code>-e</code> 声明环境变量</li><li><code>-d</code>容器在后台运行</li></ul><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><ul><li><p><code>docker start</code> 启动容器</p></li><li><p><code>docker stop</code>   关闭容器</p></li><li><p><code>docker restart</code> 重启容器</p></li><li><p><code>docker rm</code> 删除容器</p></li><li><p><code>docker ps</code> 查看正在运行的容器</p></li><li><p><code>docker ps -a</code> 查看所有容器，包括正在运行和停止的</p></li><li><p><code>docker inspect</code> 查看容器的信息</p></li><li><p><code>docker logs</code>查看日志</p></li><li><p><code>docker cp</code> 在容器和宿主机间复制文件</p></li></ul><p><code>docker cp ./some_file 容器名:/work</code><br><code>docker cp 容器名:/var/logs/ /tmp/app_logs</code></p><h1 id="docker存储"><a href="#docker存储" class="headerlink" title="docker存储"></a>docker存储</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1660706155357-ef4e6649-4ed5-4958-b68d-ba9530acf4b0.png" alt="img"></p><ul><li><p>Volume: 存储在主机上，仅容器相关可以修改，是保存数据的最佳方式，方便迁移</p><p><code>docker volume create my-data</code></p></li><li><p>Bind: 将主机的文件或目录挂载到容器中，二者均可以修改</p></li></ul><h1 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h1><p>可以使用depends_on表明依赖关系，决定容器启动顺序</p><h1 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h1><p><code>dockerfile</code>通常包含以下几个常用命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">18.04</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> make .</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> python app.py</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><ul><li><p><code>FROM</code> 打包使用的基础镜像</p></li><li><p><code>WORKDIR</code>相当于<code>cd</code>命令，进入工作目录</p></li><li><p><code>COPY</code> 将宿主机的文件复制到容器内</p></li><li><p><code>RUN</code>打包时执行的命令，相当于打包过程中在容器中执行shell脚本，通常用来安装应用程序所需要的依赖、设置权限、初始化配置文件等</p></li><li><p><code>CMD</code>运行镜像时执行的命令</p></li><li><p><code>EXPOSE</code>指定容器在运行时监听的网络端口，它并不会公开端口，仅起到声明的作用，公开端口需要容器运行时使用-p参数指定。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/08/03/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%B3%BB%E5%88%97/"/>
    <url>/2024/08/03/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前缀和、二分查找问题</title>
    <link href="/2024/08/03/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <url>/2024/08/03/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="2615-等值距离和"><a href="#2615-等值距离和" class="headerlink" title="2615. 等值距离和"></a>2615. 等值距离和</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。现有一个长度等于 <code>nums.length</code> 的数组 <code>arr</code> 。对于满足 <code>nums[j] == nums[i]</code> 且 <code>j != i</code> 的所有 <code>j</code> ，<code>arr[i]</code> 等于所有 <code>|i - j|</code> 之和。如果不存在这样的 <code>j</code> ，则令 <code>arr[i]</code> 等于 <code>0</code> 。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,3,1,1,2]</span><br>输出：<span class="hljs-comment">[5,0,3,4,0]</span><br>解释：<br>i = 0 ，nums<span class="hljs-comment">[0]</span> == nums<span class="hljs-comment">[2]</span> 且 nums<span class="hljs-comment">[0]</span> == nums<span class="hljs-comment">[3]</span> 。因此，arr<span class="hljs-comment">[0]</span> = |0 - 2| + |0 - 3| = 5 。 <br>i = 1 ，arr<span class="hljs-comment">[1]</span> = 0 因为不存在值等于 3 的其他下标。<br>i = 2 ，nums<span class="hljs-comment">[2]</span> == nums<span class="hljs-comment">[0]</span> 且 nums<span class="hljs-comment">[2]</span> == nums<span class="hljs-comment">[3]</span> 。因此，arr<span class="hljs-comment">[2]</span> = |2 - 0| + |2 - 3| = 3 。<br>i = 3 ，nums<span class="hljs-comment">[3]</span> == nums<span class="hljs-comment">[0]</span> 且 nums<span class="hljs-comment">[3]</span> == nums<span class="hljs-comment">[2]</span> 。因此，arr<span class="hljs-comment">[3]</span> = |3 - 0| + |3 - 2| = 4 。 <br>i = 4 ，arr<span class="hljs-comment">[4]</span> = 0 因为不存在值等于 2 的其他下标。<br></code></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>初次采用双for循环暴力破解，可以实现但复杂度较高</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span>[] distance(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[nums.length];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; nums.length; j++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i] == nums[j])&#123;<br>                   <span class="hljs-keyword">if</span>(i &gt; j)&#123;<br>                       temp += i - j;<br>                   &#125;<span class="hljs-keyword">else</span>&#123;<br>                       temp += j - i;<br>                   &#125;<br>                &#125;<br>            &#125;<br>            arr[i] = temp;<br>            temp = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前缀和</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双指针解决数组问题</title>
    <link href="/2024/07/26/%E5%8F%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84/"/>
    <url>/2024/07/26/%E5%8F%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">0,0,1,1</span>,<span class="hljs-number">1,2,2,3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>输出：<span class="hljs-number">5</span>, nums = [<span class="hljs-number">0,1,2,3</span>,<span class="hljs-number">4</span>]<br>解释：函数应该返回新的长度 <span class="hljs-number">5</span> ， 并且原数组 nums 的前五个元素被修改为 <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> 。不需要考虑数组中超出新长度后面的元素。<br></code></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于无需返回新数组，只需要在原来数组的基础上更新，最终得到唯一元素数量即可，并且数组已排好序。</p><ul><li>核心思路为快慢指针，慢指针指向更新后的新数组，快指针不断向后遍历</li><li>当 fast 遇到新元素后，更新数组</li><li>最终元素数量可根据 slow 的值求解</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  <br>    <span class="hljs-keyword">if</span>(nums.length == <span class="hljs-number">0</span> || nums.length == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> nums.length;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(fast &lt; nums.length)&#123;<br>        <span class="hljs-keyword">if</span>(nums[fast] != nums[fast - <span class="hljs-number">1</span>])&#123;<br>            nums[slow++] = nums[fast];<br>        &#125;<br>        fast ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="80-删除有序数组中的重复项2"><a href="#80-删除有序数组中的重复项2" class="headerlink" title="80. 删除有序数组中的重复项2"></a>80. 删除有序数组中的重复项2</h1><p>给你一个有序数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">0,0,1,1</span>,<span class="hljs-number">1,1,2,3</span>,<span class="hljs-number">3</span>]<br>输出：<span class="hljs-number">7</span>, nums = [<span class="hljs-number">0,0,1,1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]<br>解释：函数应返回新长度 length = <span class="hljs-number">7</span>, 并且原数组的前七个元素被修改为 <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>。不需要考虑数组中超出新长度后面的元素。<br></code></pre></td></tr></table></figure><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>与上一题基本一致，采用双指针，只是这里需要对两个以上的数组进行判断</p><ul><li>自己完成时采用变量对出现次数进行计数，实际并没必要</li><li>由于数组依旧排好序，只需将nums[fast]与nums[slow - 2]比较即可</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>自己版本，有些繁琐了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">if</span>(len == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(fast &lt; len)&#123;<br>            <span class="hljs-keyword">if</span>(nums[fast] == nums[fast - <span class="hljs-number">1</span>] &amp;&amp; count &gt;= <span class="hljs-number">2</span>)&#123;<br>                fast ++;<br>                count ++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>( nums[fast] == nums[fast - <span class="hljs-number">1</span>])&#123;<br>                    count++;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    count = <span class="hljs-number">1</span>;<br>                &#125;<br>                nums[slow] = nums[fast];<br>                fast++;<br>                slow++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>官方解答</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> n;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>, fast = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (fast &lt; n) &#123;<br>            <span class="hljs-keyword">if</span> (nums[slow - <span class="hljs-number">2</span>] != nums[fast]) &#123;<br>                nums[slow] = nums[fast];<br>                ++slow;<br>            &#125;<br>            ++fast;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素。元素的顺序可能发生改变。然后返回 <code>nums</code> 中与 <code>val</code> 不同的元素的数量。</p><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">0,1,2,2</span>,<span class="hljs-number">3,0,4,2</span>], val = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">5</span>, nums = [<span class="hljs-number">0,1,4,0</span>,<span class="hljs-number">3</span>,_,_,_]<br>解释：你的函数应该返回 k = <span class="hljs-number">5</span>，并且 nums 中的前五个元素为 <span class="hljs-number">0,0,1,3</span>,<span class="hljs-number">4</span>。<br>注意这五个元素可以任意顺序返回。<br>你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）<br></code></pre></td></tr></table></figure><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>与上一题基本一致，使用双指针即可</p><ul><li>普通快慢指针可能会出现重复赋值的问题</li><li>但在替换时如果第一个元素需要移除，那后续的所有元素均要前移</li><li>因此可以采用左右指针，当需要移除时，交换左右两个指针对应的数据即可</li></ul><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><p>方法一：快慢指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>     <span class="hljs-keyword">if</span>(len == <span class="hljs-number">0</span>)&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>     &#125;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">while</span>(fast &lt; len)&#123;<br>         <span class="hljs-keyword">if</span>(nums[fast] != val)&#123;<br>             nums[slow++] = nums[fast];<br>         &#125;<br>         fast++;<br>     &#125;<br>     <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：左右指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>      <span class="hljs-keyword">if</span>(len == <span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> len;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br>          <span class="hljs-keyword">if</span>(nums[left] == val)&#123;<br>              nums[left] = nums[right - <span class="hljs-number">1</span>];<br>              right--;<br>          &#125;<span class="hljs-keyword">else</span>&#123;<br>              left++;<br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283 移动零"></a>283 移动零</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入: nums = <span class="hljs-string">[0,1,0,3,12]</span><br>输出: <span class="hljs-string">[1,3,12,0,0]</span><br></code></pre></td></tr></table></figure><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>原地交换</p><ul><li>当遇到非0数值时，交换快慢指针，并后移</li><li>当遇到0时，慢指针停下，等待交换</li></ul><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] != <span class="hljs-number">0</span>)&#123;<br>                swap(nums, i, j);<br>                j++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[i];<br>        nums[i] = nums[j];<br>        nums[j] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Array 双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xlstm 学习</title>
    <link href="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="xlstm模型"><a href="#xlstm模型" class="headerlink" title="xlstm模型"></a>xlstm模型</h1><p>对于时间序列的任务场景：</p><ul><li>前后关联强</li></ul><p>标准神经网络弊端：</p><ul><li>输入和输出可能具有不同长度，无法处理</li><li>较为单纯，不能共享从文本不同位置上学到的特征（当在A学习到人名后，在B处无法识别）</li><li>参数量较大</li><li>无法体现时序的前因后果</li></ul><h2 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h2><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240706153544938.png" alt="image-20240706153544938"></p><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240706155214745.png" alt="image-20240706155214745"></p><ol><li>通过串联结构体现前因后果</li><li>所有节点共享同一套参数</li></ol><h3 id="形象总结"><a href="#形象总结" class="headerlink" title="形象总结"></a>形象总结</h3><p>RNN：只是基于前一时刻，shortmemory</p><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240725093537337.png" alt="image-20240725093537337"></p><p>x为输入，中间链条s为隐藏状态，y为网络输出</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>序列太长时，会导致梯度消失，只能捕捉到局部依赖关系</p><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240706154915486.png" alt="image-20240706154915486"></p><h2 id="LSTM（Long-Short-Term-Memory-networks）"><a href="#LSTM（Long-Short-Term-Memory-networks）" class="headerlink" title="LSTM（Long Short Term Memory networks）"></a>LSTM（Long Short Term Memory networks）</h2><p>由RNN网络演变而来，用于解决长期依赖性问题</p><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240706155228326.png" alt="image-20240706155228326"></p><p>sigmoid 用于输出0～1之间的数字，用于筛选，为0则不通过，反之</p><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240725093935894.png" alt="image-20240725093935894"></p><p>新增链条Ct</p><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240725094133700.png" alt="image-20240725094133700"></p><p>协调控制长短期记忆链</p><h4 id="遗忘门"><a href="#遗忘门" class="headerlink" title="遗忘门"></a>遗忘门</h4><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240707161225104.png" alt="image-20240707161225104"></p><p>通过为Ct-1中每个数字输出一个1～0之间的数字，决定从单元格Ct-1中丢弃哪些信息，</p><h4 id="输入门"><a href="#输入门" class="headerlink" title="输入门"></a>输入门</h4><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240707161735665.png" alt="image-20240707161735665"></p><p>sigmoid 决定哪些值需要更新；tanh 层创建向量 C̃t 用于添加到状态中</p><h4 id="更新状态Ct"><a href="#更新状态Ct" class="headerlink" title="更新状态Ct"></a>更新状态Ct</h4><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240707162353960.png" alt="image-20240707162353960"></p><h4 id="输出门"><a href="#输出门" class="headerlink" title="输出门"></a>输出门</h4><p><img src="/2024/07/04/lstm%E5%AD%A6%E4%B9%A0/image-20240707162757837.png" alt="image-20240707162757837"></p><p>首先通过sigmoid层决定输出单元状态的哪些部分，得到ot（门控向量）</p><p>然后通过tanh函数，将细胞状态的值控制在[-1,1]之间</p><p>最后通过相乘实现选择性的信息过滤：当ot的某个维度接近0，信息将被抑制或忽略，反之被完全保留</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>处理长序列是效率太低</li><li>记忆容量有限</li><li>不能并行处理数据</li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xlstm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表算法总结</title>
    <link href="/2024/03/26/%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95/"/>
    <url>/2024/03/26/%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="第一部分-快慢指针的运用"><a href="#第一部分-快慢指针的运用" class="headerlink" title="第一部分 快慢指针的运用"></a>第一部分 快慢指针的运用</h1><h2 id="倒数第k个结点"><a href="#倒数第k个结点" class="headerlink" title="倒数第k个结点"></a>倒数第k个结点</h2><p>由于链表无法像Array那样，根据索引快速获取对应索引值的数据，因此只能通过类似遍历的方法获得对应结点的索引，这也使他产生了以下问题：</p><p>如果我想找到倒数第k个结点呢？难道要遍历两遍吗，因为获得链表的长度就需要遍历一遍链表</p><blockquote><p>快慢指针</p></blockquote><p><img src="/2024/03/26/%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95/image-20240326222935590-1528490.png" alt="image-20240326222935590"></p><p>由上图所示，先将快指针移动k，这样两个指针之间的距离则为k；现在让这两个指针同时移动，直到快指针指向的结点为null，这样慢指针刚好为第k-1个指针！！妙哉！！</p><h2 id="中间结点"><a href="#中间结点" class="headerlink" title="中间结点"></a>中间结点</h2><p>相较上一个问题来说，这个就简单了许多。</p><p>由于fast的速度永远是slow的2倍，</p><ul><li>那么若是总结点个数为基数，则当fast指向最后一个结点时，slow刚好指向中间结点</li><li>若总结点为偶数，当fast指向空结点时，slow指向中间结点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这样设置判断条件，可以使快指针刚好落到上述两种情况</span><br><span class="hljs-keyword">while</span>(q != <span class="hljs-literal">null</span> &amp;&amp; q.next != <span class="hljs-literal">null</span>) &#123;<br>            p = p.next;<br>            q = q.next.next;<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><blockquote><p>判断链表是否有环，若没有则返回null，若有则返回环的入口</p></blockquote><p>若是单纯判断链表是否有环，较为简单，运用我们刚学到的快慢指针即可解决。</p><p>让快指针每次移动2个结点，慢指针移动1个结点。这样如果快指针为空，则证明肯定无环；如果两个指针相遇，则有环。</p><blockquote><p>但是如何找到环的入口呢？</p></blockquote><p>对于我这种数学不好的人，还是不用公式推导了，建议使用归纳法</p><p><img src="/2024/03/26/%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95/image-20240328215658287.png" alt="image-20240328215658287"></p><p>由于我们只能得到两指针的相遇点，那么我们是不是可以找找入口和相遇点的关系</p><p>根据上图所示，两指针在6相遇</p><blockquote><p>从6到入口的距离和从链表头到起点的距离相等！！</p></blockquote><p>问题引刃而解</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">刷刷这道题就好了</a></p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linked List</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
